var winston = require('winston');
var request = require('request');
var util = require('util');
var mkpath = require('mkpath')
var logger = new(winston.Logger)({
    transports: [
        new(winston.transports.Console)(),
        new(winston.transports.File)({
            filename: '../log/serverlog.log'
        })
    ]
});

creatfolder("../log")

/* create folder by a given path and set 0777 access @param{obj} cjb , current
 * job object*/
####creatfolder


/* replace by peer in allsettings*/
####replacepeer


/* util.ispect a object*/
####tru


/* replace html entities to text*/
####tranHtml2Txt


/* console.log wrapper*/
####trl


/* show process memoryuse*/
####trmem


/* show each content in object seperately */
####trn


/* trace conten with logger*/
####tr


/* wrapper of console.log()*/
####tc


/* find an object  size / length
 * @param{objet} obj          , current job
 * @return{int} count         , a size number in byte*/
####osize


/* compare if a array in anoterh array, if A in B
 * @param{array} arra         ,  A array 
 * @param{array} arrb         ,  B array 
 * @return{boolean} result    , in or not in*/
####arrainbtest


/* create array  which only A have plus which only B have
 * @param{array} arra         ,  A array 
 * @param{array} arrb         ,  B array 
 * @return{array} arrd    ,  A  B different parts*/
####arradiffb


/* create array  which only A over B 
 * @param{array} arra         ,  A array 
 * @param{array} arrb         ,  B array 
 * @return{array} arrd    ,  A  B same parts*/
####arraoverb


/* create array  which A more than B
 * @param{array} arra         ,  A array 
 * @param{array} arrb         ,  B array 
 * @return{array} arrm    ,  A more than B*/
####arragtb


/* clone an object  another version
 * @param{object} obj         , current job*/
####cloneobj


/* clone an object
 * @param{object} obj         , current job*/
####clone


/*  convert obj to arr.
 *  @param{obj} org obj   , 
 *  @return{array}  ,  */
####obj2arr


/*  convert obj to regular exp.   expect obj is list of string 
 *  @param{obj} org obj   , 
 *  @return{regexp}          ,  */
####obj2reg


/*  change seconts to higher time unit.
 * @param{number} seconds       , original text to be cutyed
 * @return{String}          ,  a combination text of hour  minutes and seconds*/
####secondsToString


/* trace 1st level content in an object
 * @param{objet} obj          , current job */
####tobj

/* do something useful for buffers  when loading a uri
 * @param{string} str         , a input str need to be translate
 * @param{object} dictobj     , a object include map as a dict
 * @return{string} str        ,  return the translated str */
####translatestr


/* do something useful for buffers  when loading a uri
 * @param{string} uri         , load this uri
 * @param{string} filename    , save to this file 
 * @param{object} job         , current job object
 * @param{function} callback  , callback*/
####downreq



/* join several obj and convert to array
 * @param{array} orgarr   ,  multipal array can be used as params, which need to be join togething
 * @return{array} newarr  ,   join several obj and convert to array */
####joinAsArray


/* convert a function to a object, which can use call backs with parameter
 * @param{function} infunc   ,  a function need to be convert
 * @attribute{function} callback   ,  a single function or multiple functino in an array.
 * @return{object} this  ,  a object that support .callback*/
####func2obj



/* common use for put err in option for cb refer
 * @param{option} object for current running process o refer
 * @param{err}   err we focusing on 
 * @return{option} */
####assignErr


/* run in serials*/
####runcbsfn


/* run a serial of callbackk in an array , each cb has .run method.
 * this need to be runing with func2Obj to impliment a sync process
 * @param{funcArr} Array with str   ,  a number or string of function name
 * @return{null} */
####runcbs


/* add params for a callback
 * @param{function} infunc   ,  original callback function
 * @attribute{int} length   ,  the expected length
 * @return{string} str  ,  return result string */
####makecb


/* copy appendObj data to orgObj, if the same , 
 * appendObjs content will overwrite orgobj content
 * @param{object} orgObj   ,  original object
 * @attribute{object} appendObj   ,  the  addon object
 * @return{object} orgObj  ,  return result object*/
####mergeobj



/* convert a string to expect length 
 * @param{mix} str   ,  a number or string need to be adept 
 * @attribute{int} length   ,  the expected length
 * @return{string} str  ,  return result string */
####tolen


/* get the max number in an array 
 * @param{Array} numArray   ,  a number or string need to be adept 
 * @return{Int} return  ,  return max of result number*/
####getMaxOfArray


/*  return a yy+"_"+mm+"_"+dd+"_"+hh+"_"+mi+"_"+ss  string*/
####gettime


/*  fill 0 in front of  digits by assigned digits number*/
####filldigits

/*  fill 0 in front of  digits by assigned digits number*/
####cutdec


/*  show size in mb gb*/
####shortenunit


/*  get parent path, return string*/
####uppath


/*  get parent path, return string*/
####String.prototype.replaceall 


/* insert char in a string*/
####String.prototype.splice 


/* replaceAll for string*/
####String.prototype.replaceAll 


/* print task finished]*/
####finishfn


/* show a object memory use*/
####trobjmem

