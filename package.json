{
  "name": "smt",
  "description": "small tools collection",
  "version": "0.0.2",
  "author": {
    "name": "twindai"
  },
  "private": true,
  "license": "MIT",
  "main": "./src/smt.js",
  "dependencies": {
    "mkpath": "0.1.x",
    "winston": "0.7.1"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
   "repository": {
    "type": "git",
    "url": "git+https://github.com/guandai/smt.git"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-concat": "~0.4.0",
    "grunt-contrib-jasmine": "^0.8.2",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-qunit": "~0.5.2",
    "grunt-contrib-requirejs": "^0.4.4",
    "grunt-contrib-uglify": "~0.5.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-jasmine-node": "^0.3.1",
    "grunt-template-jasmine-requirejs": "^0.2.3"
  },
  "preferGlobal": true,
  "gitHead": "540e5f4d44a1549481dbd9418ab27becff84ad96",
  "readme": "===== Getting started ===\r\n\r\nTo install dependencies:\r\n\tnpm install   \r\n\r\n\r\nInstall \"supervisor\" \r\nnpm install -g supervisor\r\n\r\n\r\n-node install\r\n\r\nnpm install guandai/smt\r\n\r\n-or  by  bower\r\n\r\nbower install guandai/smt\r\n\r\n\r\n## function list\r\n\r\n\r\n\r\n#### revertjson\r\n*  revert vertical and horizental in a json\r\n\r\n\r\n\r\n#### fillzero\r\n*  fill 0 in front of  digits by assigned digits number\r\n\r\n\r\n####creatfolder\r\n\r\n *create folder by a given path and set 0777 access @param{obj} cjb , current\r\n * job object\r\n \r\n\r\n\r\n####enumobj\r\n* enumerate each object in a object to match valname\r\n\r\n\r\n\r\n####replacepeer\r\n\r\n *replace by peer in allsettings\r\n \r\n\r\n\r\n####tru\r\n\r\n *util.ispect a object\r\n \r\n\r\n\r\n####tranHtml2Txt\r\n\r\n *replace html entities to text\r\n \r\n\r\n\r\n####trl\r\n\r\n *console.log wrapper\r\n \r\n\r\n\r\n####trmem\r\n\r\n *show process memoryuse\r\n \r\n\r\n\r\n####trn\r\n\r\n *show each content in object seperately \r\n \r\n\r\n\r\n####tr\r\n\r\n *trace conten with logger\r\n \r\n\r\n\r\n####tc\r\n\r\n *wrapper of console.log()\r\n \r\n\r\n\r\n####osize\r\n\r\n *find an object  size / length\r\n * @param{objet} obj          , current job\r\n * @return{int} count         , a size number in byte\r\n \r\n\r\n\r\n####arrainbtest\r\n\r\n *compare if a array in anoterh array, if A in B\r\n * @param{array} arra         ,  A array \r\n * @param{array} arrb         ,  B array \r\n * @return{boolean} result    , in or not in\r\n \r\n\r\n\r\n####arradiffb\r\n\r\n *create array  which only A have plus which only B have\r\n * @param{array} arra         ,  A array \r\n * @param{array} arrb         ,  B array \r\n * @return{array} arrd    ,  A  B different parts\r\n \r\n\r\n\r\n####arraoverb\r\n\r\n *create array  which only A over B \r\n * @param{array} arra         ,  A array \r\n * @param{array} arrb         ,  B array \r\n * @return{array} arrd    ,  A  B same parts\r\n \r\n\r\n\r\n####arragtb\r\n\r\n *create array  which A more than B\r\n * @param{array} arra         ,  A array \r\n * @param{array} arrb         ,  B array \r\n * @return{array} arrm    ,  A more than B\r\n \r\n\r\n\r\n####cloneobj\r\n\r\n *clone an object  another version\r\n * @param{object} obj         , current job\r\n \r\n\r\n\r\n####clone\r\n\r\n *clone an object\r\n * @param{object} obj         , current job\r\n \r\n\r\n\r\n####obj2arr\r\n\r\n * convert obj to arr.\r\n *  @param{obj} org obj   , \r\n *  @return{array}  ,  \r\n \r\n\r\n\r\n####obj2reg\r\n\r\n * convert obj to regular exp.   expect obj is list of string \r\n *  @param{obj} org obj   , \r\n *  @return{regexp}          ,  \r\n \r\n\r\n\r\n####secondsToString\r\n\r\n * change seconts to higher time unit.\r\n * @param{number} seconds       , original text to be cutyed\r\n * @return{String}          ,  a combination text of hour  minutes and seconds\r\n \r\n\r\n\r\n####tobj\r\n\r\n *trace 1st level content in an object\r\n * @param{objet} obj          , current job \r\n \r\n\r\n####translatestr\r\n\r\n *do something useful for buffers  when loading a uri\r\n * @param{string} str         , a input str need to be translate\r\n * @param{object} dictobj     , a object include map as a dict\r\n * @return{string} str        ,  return the translated str \r\n \r\n\r\n\r\n\r\n####joinAsArray\r\n\r\n *join several obj and convert to array\r\n * @param{array} orgarr   ,  multipal array can be used as params, which need to be join togething\r\n * @return{array} newarr  ,   join several obj and convert to array \r\n \r\n\r\n\r\n####func2obj\r\n\r\n *convert a function to a object, which can use call backs with parameter\r\n * @param{function} infunc   ,  a function need to be convert\r\n * @attribute{function} callback   ,  a single function or multiple functino in an array.\r\n * @return{object} this  ,  a object that support .callback\r\n \r\n\r\n\r\n\r\n####assignErr\r\n\r\n *common use for put err in option for cb refer\r\n * @param{option} object for current running process o refer\r\n * @param{err}   err we focusing on \r\n * @return{option} \r\n \r\n\r\n\r\n####runcbsfn\r\n\r\n *run in serials\r\n \r\n\r\n\r\n####runcbs\r\n\r\n *run a serial of callbackk in an array , each cb has .run method.\r\n * this need to be runing with func2Obj to impliment a sync process\r\n * @param{funcArr} Array with str   ,  a number or string of function name\r\n * @return{null} \r\n \r\n\r\n\r\n####makecb\r\n\r\n *add params for a callback\r\n * @param{function} infunc   ,  original callback function\r\n * @attribute{int} length   ,  the expected length\r\n * @return{string} str  ,  return result string \r\n \r\n\r\n\r\n####mergeobj\r\n\r\n *copy appendObj data to orgObj, if the same , \r\n * appendObjs content will overwrite orgobj content\r\n * @param{object} orgObj   ,  original object\r\n * @attribute{object} appendObj   ,  the  addon object\r\n * @return{object} orgObj  ,  return result object\r\n \r\n\r\n\r\n\r\n####tolen\r\n\r\n *convert a string to expect length \r\n * @param{mix} str   ,  a number or string need to be adept \r\n * @attribute{int} length   ,  the expected length\r\n * @return{string} str  ,  return result string \r\n \r\n\r\n\r\n####getMaxOfArray\r\n\r\n *get the max number in an array \r\n * @param{Array} numArray   ,  a number or string need to be adept \r\n * @return{Int} return  ,  return max of result number\r\n \r\n\r\n\r\n####gettime\r\n\r\n * return a yy+\"_\"+mm+\"_\"+dd+\"_\"+hh+\"_\"+mi+\"_\"+ss  string\r\n \r\n\r\n\r\n####filldigits\r\n\r\n * fill 0 in front of  digits by assigned digits number\r\n \r\n\r\n\r\n####cutdec\r\n\r\n * fill 0 in front of  digits by assigned digits number\r\n \r\n\r\n\r\n####shortenunit\r\n\r\n * show size in mb gb\r\n \r\n\r\n\r\n####uppath\r\n\r\n * get parent path, return string\r\n \r\n\r\n\r\n####String.prototype.replaceall \r\n\r\n * get parent path, return string\r\n \r\n\r\n\r\n####String.prototype.splice \r\n\r\n *insert char in a string\r\n \r\n\r\n\r\n####String.prototype.replaceAll \r\n\r\n *replaceAll for string\r\n \r\n\r\n####get class name of a object\r\n*Object.prototype.getName\r\n\r\n\r\n####finishfn\r\n\r\n *print task finished]\r\n \r\n\r\n\r\n####trobjmem\r\n *show a object memory use\r\n *@param{object} object   ,  show mem use of this param\r\n \r\n\r\n",
  "readmeFilename": "readme.md",
  "_id": "smt@0.0.1",
  "_shasum": "55b26ac5cdf42e0912228d85d208573c30bbf4f5",
  "_from": "guandai/smt",
  "_resolved": "git://github.com/guandai/smt.git#540e5f4d44a1549481dbd9418ab27becff84ad96"
}
